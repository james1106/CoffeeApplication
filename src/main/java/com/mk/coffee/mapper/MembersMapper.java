package com.mk.coffee.mapper;

import com.mk.coffee.model.Members;
import com.mk.coffee.model.MembersExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

public interface MembersMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    long countByExample(MembersExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    int deleteByExample(MembersExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    @Delete({
        "delete from members",
        "where id = #{id,jdbcType=DECIMAL}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    @Insert({
        "insert into members (id, name, ",
        "email, phone, create_date, ",
        "password, oauth_id, ",
        "local_token, headportrait_url, ",
        "open_id, sex, is_regist)",
        "values (#{id,jdbcType=DECIMAL}, #{name,jdbcType=VARCHAR}, ",
        "#{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, ",
        "#{password,jdbcType=VARCHAR}, #{oauthId,jdbcType=INTEGER}, ",
        "#{localToken,jdbcType=VARCHAR}, #{headportraitUrl,jdbcType=VARCHAR}, ",
        "#{openId,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{isRegist,jdbcType=BIT})"
    })
    int insert(Members record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    int insertSelective(Members record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    List<Members> selectByExample(MembersExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, name, email, phone, create_date, password, oauth_id, local_token, headportrait_url, ",
        "open_id, sex, is_regist",
        "from members",
        "where id = #{id,jdbcType=DECIMAL}"
    })
    @ResultMap("com.mk.coffee.mapper.MembersMapper.BaseResultMap")
    Members selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    int updateByExampleSelective(@Param("record") Members record, @Param("example") MembersExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    int updateByExample(@Param("record") Members record, @Param("example") MembersExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(Members record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table members
     *
     * @mbg.generated
     */
    @Update({
        "update members",
        "set name = #{name,jdbcType=VARCHAR},",
          "email = #{email,jdbcType=VARCHAR},",
          "phone = #{phone,jdbcType=VARCHAR},",
          "create_date = #{createDate,jdbcType=TIMESTAMP},",
          "password = #{password,jdbcType=VARCHAR},",
          "oauth_id = #{oauthId,jdbcType=INTEGER},",
          "local_token = #{localToken,jdbcType=VARCHAR},",
          "headportrait_url = #{headportraitUrl,jdbcType=VARCHAR},",
          "open_id = #{openId,jdbcType=VARCHAR},",
          "sex = #{sex,jdbcType=VARCHAR},",
          "is_regist = #{isRegist,jdbcType=BIT}",
        "where id = #{id,jdbcType=DECIMAL}"
    })
    int updateByPrimaryKey(Members record);

    @Select({
            "select",
            "id, name, email, phone, create_date, password, oauth_id, local_token, ",
            "headportrait_url, open_id, sex,is_regist",
            "from members",
            "where phone = #{phone}"
    })
    Members getMemberByPhone(@Param("phone") String phone);


    @Select({
            "select",
            "id, name, email, phone, create_date, password, oauth_id, local_token, ",
            "headportrait_url,open_id,is_regist",
            "from members",
            "where open_id like #{openId}"
    })
    Members getMemberByOpenId(@Param("openId") String openId);

    @Update({
            "update members",
            "set name = #{name,jdbcType=VARCHAR},",
            "email = #{email,jdbcType=VARCHAR},",
            "password = #{password,jdbcType=VARCHAR} where id = #{id,jdbcType=INTEGER}"
    })
    int updataMemberByMember(Members members);

    @Insert({
            "insert into members(id,phone,create_date)",
            "values(#{id,jdbcType=DECIMAL},#{phone,jdbcType=VARCHAR},#{createDate,jdbcType=TIMESTAMP})"
    })
    int register(Members members);


    @Select({
            "id, name, email, phone, create_date, password, oauth_id, local_token, ",
            "headportrait_url, open_id, sex,is_regist",
            "from members",
            "where phone = #{phone,jdbcType=INTEGER}"
    })
    @ResultMap("com.mk.coffee.mapper.MembersMapper.BaseResultMap")
    Members login(String phone);


    @Update({"update members set local_token = #{token,jdbcType=VARCHAR} where id = #{id,jdbcType=INTEGER}"})
    int updateLocalTokenByPrimaryById(int id, String token);

    //纪录关注者open_id
    @Insert({
            "insert into members (id,create_date,",
            "headportrait_url, open_id,sex)",
            "values (#{id,jdbcType=DECIMAL},#{createDate,jdbcType=TIMESTAMP},",
            "#{headportraitUrl,jdbcType=VARCHAR}, #{openId,jdbcType=VARCHAR}, ",
            "#{sex,jdbcType=VARCHAR})"
    })
    int inertMemberByOpenId(Members members);

    //查询会员是否有open_id
    @Select({"select",
            "id, name, email, phone, create_date, password, oauth_id, local_token, ",
            "headportrait_url, open_id,is_regist",
            "from members",
            "where open_id = #{openId}"})
    Members selectMemberByOpenId(@Param("openId") String openId);


    @Update({
            "update members",
            "set local_token = #{localToken,jdbcType=VARCHAR} where id = #{id,jdbcType=INTEGER}"
    })
    int updateTokenByPrimaryKey(Members record);


    Members getMemberById(@Param("id")long id);


    List<Members> getMemberList();
}