<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mk.coffee.mapper.MemberAddressMapper">
    <resultMap id="BaseResultMap" type="com.mk.coffee.model.MemberAddress">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <constructor>
            <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="member_id" javaType="java.lang.Long" jdbcType="DECIMAL"/>
            <arg column="address_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="is_selected" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="create_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        </constructor>
    </resultMap>
    <sql id="Example_Where_Clause">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        id, member_id, address_id, is_selected, create_date
    </sql>
    <select id="selectByExample" parameterType="com.mk.coffee.model.MemberAddressExample" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from member_address
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="com.mk.coffee.model.MemberAddressExample">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from member_address
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insertSelective" parameterType="com.mk.coffee.model.MemberAddress">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into member_address
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="memberId != null">
                member_id,
            </if>
            <if test="addressId != null">
                address_id,
            </if>
            <if test="isSelected != null">
                is_selected,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="memberId != null">
                #{memberId,jdbcType=DECIMAL},
            </if>
            <if test="addressId != null">
                #{addressId,jdbcType=INTEGER},
            </if>
            <if test="isSelected != null">
                #{isSelected,jdbcType=BIT},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.mk.coffee.model.MemberAddressExample" resultType="java.lang.Long">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select count(*) from member_address
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update member_address
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.memberId != null">
                member_id = #{record.memberId,jdbcType=DECIMAL},
            </if>
            <if test="record.addressId != null">
                address_id = #{record.addressId,jdbcType=INTEGER},
            </if>
            <if test="record.isSelected != null">
                is_selected = #{record.isSelected,jdbcType=BIT},
            </if>
            <if test="record.createDate != null">
                create_date = #{record.createDate,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update member_address
        set id = #{record.id,jdbcType=INTEGER},
        member_id = #{record.memberId,jdbcType=DECIMAL},
        address_id = #{record.addressId,jdbcType=INTEGER},
        is_selected = #{record.isSelected,jdbcType=BIT},
        create_date = #{record.createDate,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.mk.coffee.model.MemberAddress">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update member_address
        <set>
            <if test="memberId != null">
                member_id = #{memberId,jdbcType=DECIMAL},
            </if>
            <if test="addressId != null">
                address_id = #{addressId,jdbcType=INTEGER},
            </if>
            <if test="isSelected != null">
                is_selected = #{isSelected,jdbcType=BIT},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="getMemberAddressByMemberId" resultType="com.mk.coffee.model.MemberAddress">
        SELECT
        ma.id,
        ma.member_id,
        ma.is_selected,
        ma.create_date,
        a.id "address.id",
        a.contacts "address.contacts",
        a.phone "address.phone",
        a.province "address.province",
        a.city "address.city",
        a.area "address.area",
        a.address "address.address",
        a.longitude "address.longitude",
        a.latitude "address.latitude"
        FROM member_address ma
        INNER JOIN address a ON ma.address_id=a.id
        WHERE ma.member_id=#{memberId}
    </select>

    <select id="getSelectedMemberAddress" resultType="com.mk.coffee.model.MemberAddress">
        SELECT
        ma.id,
        ma.member_id,
        ma.is_selected,
        ma.create_date,
        a.id "address.id",
        a.contacts "address.contacts",
        a.phone "address.phone",
        a.province "address.province",
        a.city "address.city",
        a.area "address.area",
        a.address "address.address",
        a.longitude "address.longitude",
        a.latitude "address.latitude"
        FROM member_address ma
        INNER JOIN address a ON ma.address_id=a.id
        WHERE ma.member_id=#{memberId} AND ma.is_selected=1
    </select>
</mapper>